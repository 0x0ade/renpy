init python:
    
    class _ImageMapper(object):

        def __init__(self, screen, ground, idle, hover, selected_idle, selected_hover, hotspots):

            # If the argument is a dict, look up the screen in that dict, and
            # return the result. Otherwise, just return the result.
            def maybe_screen(a):
                if isinstance(a, dict):
                    return a[screen]
                return a
            
            self.idle = maybe_screen(idle)
            self.hover = maybe_screen(hover)
            self.selected_idle = maybe_screen(selected_idle)
            self.selected_hover = maybe_screen(selected_hover)
            
            self.hotspots = { }
            for (x1, y1, x2, y2, name) in maybe_screen(hotspots):
                self.hotspots[name] = (x1, y1, x2, y2)

            # Display the layout navigation only if there are no
            # game menu buttons defined. 
            for i in config.game_menu:
                if i[1] in self.hotspots:
                    break
            else:
                layout.navigation(screen)
                
            ui.fixed(style='imagemap')
            ui.image(ground)
            
            # Display any navigation buttons that exist.
            for e in config.game_menu:
                screen_ = e[0]
                name = e[1]
                act = e[2]
                enable = e[3]

                if not eval(enable):
                    continue

                self.button(name, act, screen == screen_)
                
        def button(self, name, clicked, selected, keymap={}):

            if name not in self.hotspots:
                return None

            x1, y1, x2, y2 = self.hotspots[name]

            if clicked is None:
                return (x1, y1, x2, y2)
            
            if selected:
                idle = self.selected_idle
                hover = self.selected_hover
            else:
                idle = self.idle
                hover = self.hover
                
            ui.imagebutton(
                LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), idle),
                LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), hover),
                xpos=x1,
                ypos=y1,
                xanchor=0,
                yanchor=0,
                clicked=clicked,
                focus_mask=True,
                style='imagemap_button',
                keymap=keymap,
                )

            return (x1, y1, x2, y2)

            
        def bar(self, name, range, value, changed):

            if name not in self.hotspots:
                return

            x1, y1, x2, y2 = self.hotspots[name]

            ui.bar(
                range,
                value,
                changed=changed,
                left_gutter=0,
                right_gutter=0,
                left_bar=LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), self.selected_idle),
                right_bar=LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), self.idle),
                hover_left_bar=LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), self.selected_hover),
                hover_right_bar=LiveCrop((x1, y1, (x2 - x1), (y2 - y1)), self.hover),
                bar_resizing=False,
                xpos=x1,
                ypos=y1,
                xmaximum=(x2-x1),
                ymaximum=(y2-y1),
                thumb=None,
                thumb_shadow=None,
                thumb_offset=0)
            
        def close(self):
            ui.close()
