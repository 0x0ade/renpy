# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.15.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-28 22:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/displaying_images.rst:8
# 05141f0cabd7433a8b08bd12e6214ec9
msgid "Displaying Images"
msgstr ""

#: ../../source/displaying_images.rst:10
# 09b0c29ad18e479ba4f766edb429e2ae
msgid "The defining aspect of a visual novel, lending its name to the form, are the visuals. Ren'Py contains four statements that control the display of images, and a model that determines the order in which the images are displayed. This makes it convenient to display images in a manner that is suitable for use in visual novels and other storytelling games."
msgstr ""

#: ../../source/displaying_images.rst:16
# 35143f37eb8b4d1a9679203d9780aef6
msgid "The four statements that work with images are:"
msgstr ""

#: ../../source/displaying_images.rst:18
# 5f8302ac0f26409b9b6fc8bc0cd1475e
msgid "``image`` - defines a new image."
msgstr ""

#: ../../source/displaying_images.rst:19
# 8802035e49a041eb9075df96e18e78cb
msgid "``show`` - shows an image on a layer."
msgstr ""

#: ../../source/displaying_images.rst:20
# acd2656663dc4a0ebdb0b8883ac6ed22
msgid "``scene`` - clears a layer, and optionally shows an image on that layer."
msgstr ""

#: ../../source/displaying_images.rst:21
# b2a0cec942d045189aa50cd3a0b0a192
msgid "``hide`` - removes an image from a layer."
msgstr ""

#: ../../source/displaying_images.rst:23
# 354668613b54426e984d00161673210b
msgid "As abrupt changes of image can be disconcerting to the user, Ren'Py has the ``with`` statement, which allows effects to be applied when the scene is changed."
msgstr ""

#: ../../source/displaying_images.rst:29
# 5e62bf50d8e449bd9646b00aae0a5d8a
msgid "Concepts"
msgstr ""

#: ../../source/displaying_images.rst:32
# 1958dd7a90e2400687b1958be32881e8
msgid "Image"
msgstr ""

#: ../../source/displaying_images.rst:34
# c0e905ab2d874eef8948ad9da509d2a5
msgid "An image is something that can be show to the screen using the show statement. An image consists of a name and a displayable. When the image is shown on a layer, the displayable associated with it is displayed on that layer."
msgstr ""

#: ../../source/displaying_images.rst:39
# c07f19b3b6334ea38ca3ebe5bf30a2eb
msgid "An :dfn:`image name` consists of one or more names, separated by spaces. The first component of the image name is called the :dfn:`image tag`. The second and later components of the name are the :dfn:`image attributes`."
msgstr ""

#: ../../source/displaying_images.rst:44
# c8fba8ea30a04b3982e58e3cebfd8f81
msgid "For example, take the image name ``mary beach night happy``. The image tag is ``mary``, while the image attributes are ``beach``, ``night``, and ``happy``."
msgstr ""

#: ../../source/displaying_images.rst:48
# d55bb82b258944c88055d17246a0bf1b
msgid "A displayable is something that can be shown on the screen. The most common thing to show is a static image, which can be specified by giving the filename of the image, as a string. In the example above, we might use ``\"mary_beach_night_happy.png\"`` as the filename. However, an image may refer to :ref:`any displayable Ren'Py supports <displayables>`, not just static images. Thus, the same statements that are used to display images can also be used for animations, solid colors, and the other types of displayables."
msgstr ""

#: ../../source/displaying_images.rst:58
# c7826cff01bc4916be7f7963538add9a
msgid "Layer"
msgstr ""

#: ../../source/displaying_images.rst:60
# f05d99c7d7a64d37821a199d8ef66faf
msgid "A layer is a list of displayables that are shown on the screen. Ren'Py supports multiple layers, including user-defined layers. The order of the layers is fixed within a game (controlled by the :var:`config.layers` variable), while the order of displayables within a layer is controlled by the order in which the scene and show statements are called, and the properties given to those statements."
msgstr ""

#: ../../source/displaying_images.rst:67
# 33cbf963863b4b42b26409385a6fcb98
msgid "The following layers are defined as part of Ren'Py:"
msgstr ""

#: ../../source/displaying_images.rst:72
# 9ff03d2009f147bc95cb6f3ce5a25d0f
msgid "master"
msgstr ""

#: ../../source/displaying_images.rst:70
# ccd2dfd2a71042eda7c94c2385fabb75
msgid "This is the default layer that is used by the scene, show, and hide statements. It's generally used for backgrounds and character sprites."
msgstr ""

#: ../../source/displaying_images.rst:76
# a76cc71893b9488ca92c9201fc3bde6c
msgid "transient"
msgstr ""

#: ../../source/displaying_images.rst:75
# 254842097a5247148b22c7c9ae731261
msgid "The default layer used by ui functions. This layer is cleared at the end of each interaction."
msgstr ""

#: ../../source/displaying_images.rst:79
# bfeb2018d8644ed9bd79a66b42855b74
msgid "screens"
msgstr ""

#: ../../source/displaying_images.rst:79
# 50074e06e05a4bd4b04c4ab92dd60643
msgid "This layer is used by the screen system."
msgstr ""

#: ../../source/displaying_images.rst:84
# 0199029e1ee34075a0c8c0a7b61ddabd
msgid "overlay"
msgstr ""

#: ../../source/displaying_images.rst:82
# 51facb8aa51248ad92e489bd3270664b
msgid "The default layer used when a ui function is called from within an overlay function. This layer is cleared when an interaction is restarted."
msgstr ""

#: ../../source/displaying_images.rst:86
# 396c9f31325449499b90a93a49b772fa
msgid "Additional layers can be defined by updating :var:`config.layers`, and the various other layer-related config variables. Using :func:`renpy.layer_at_list`, one or more transforms can be applied to a layer."
msgstr ""

#: ../../source/displaying_images.rst:94
# 3201dc2743424f648e65a97faa3e18fe
msgid "Image Statement"
msgstr ""

#: ../../source/displaying_images.rst:96
# c6b6bfc1ac6a45a2b21bb8555467e433
msgid "An image statement is used to define an image. An image statement consists of a single logical line beginning with the keyword ``image``, followed by an image name, an equals sign (``=``), and a displayable. For example::"
msgstr ""

#: ../../source/displaying_images.rst:110
# f38ab58c5bd94004b5e7e15b82dfef87
msgid "The image statement must be run at init-time, before game code runs. When not contained inside an init block, image statements are run at init-time, as if they were placed inside an init block of priority 0."
msgstr ""

#: ../../source/displaying_images.rst:115
# 6321e6520b0745c59e9e7558c24168e2
msgid "See also the :ref:`ATL variant of the image statement. <atl-image-statement>`"
msgstr ""

#: ../../source/displaying_images.rst:121
# e8d54676c7354fb69540090e3a6ee488
msgid "Show Statement"
msgstr ""

#: ../../source/displaying_images.rst:123
# 6ab3d10a214d4967b1e3a654abd986c1
msgid "The show statement is used to display an image on a layer. A show statement consists of a single logical line beginning with the keyword ``show``, followed by an image name, followed by zero or more properties."
msgstr ""

#: ../../source/displaying_images.rst:128
# 9697d61e16a84989b9e406f5278fdede
msgid "If the show statement is given the exact name of an existing image, that image is the one that is shown. Otherwise, Ren'Py will attempt to find a unique image that:"
msgstr ""

#: ../../source/displaying_images.rst:132
# 80385a5926834d05a4bc9bb6d16664d6
msgid "Has the same tag as the one specified in the show statement."
msgstr ""

#: ../../source/displaying_images.rst:133
# 5b53a03c3e8d49e29c39bcbf3e4d3ea6
msgid "Has all of the attributes given in the show statement."
msgstr ""

#: ../../source/displaying_images.rst:134
# 1451123f9c2b45e1a90efe543e057107
msgid "If an image with the same tag is already showing, shares the largest number of attributes with that image."
msgstr ""

#: ../../source/displaying_images.rst:137
# fc74918df60347be8914a21f6a1fe791
msgid "If a unique image cannot be found, an exception occurs."
msgstr ""

#: ../../source/displaying_images.rst:139
# 9c6653692d014d04b562d5464cd89f2f
msgid "If an image with the same image tag is already showing on the layer, the new image replaces it. Otherwise, the image is placed above all other images in the layer. (That is, closest to the user.) This order may be modified by the zorder and behind properties."
msgstr ""

#: ../../source/displaying_images.rst:144
# fb336a7372bb474d8d58cc2537bbf139
msgid "The show statement does not cause an interaction to occur. For the image to actually be displayed to the user, a statement that causes an interaction (like the say, menu, pause, and with statements) must be run."
msgstr ""

#: ../../source/displaying_images.rst:149
# 02c36ebf29c845c58f724c9e5a71e3df
msgid "The show statement takes the following properties:"
msgstr ""

#: ../../source/displaying_images.rst:154
# da796b60cfad44d994490e891682779a
msgid "``as``"
msgstr ""

#: ../../source/displaying_images.rst:152
# 9173c1f7351647849de64f2be496dd21
msgid "The as property takes a name. This name is used in place of the image tag when the image is shown. This allows the same image to be on the screen twice."
msgstr ""

#: ../../source/displaying_images.rst:165
# 9d2a279c60764afeb7acb16d2bb56b1b
msgid "``at``"
msgstr ""

#: ../../source/displaying_images.rst:157
# f57b0b18299a4f199c896117479323aa
msgid "The at property takes one or more comma-separated simple expressions. Each expression must evaluate to a transform. The transforms are applied to the image in left-to-right order."
msgstr ""

#: ../../source/displaying_images.rst:162
# fd543a1d475e41a28641642d38ae7e1a
msgid "If no at clause is given, Ren'Py will retain any existing transform that has been applied to the image. If no transform exists, the image will be displayed using the :var:`default` transform."
msgstr ""

#: ../../source/displaying_images.rst:170
# f80bdeb5b7cb4605be49fbcd192cb523
msgid "``behind``"
msgstr ""

#: ../../source/displaying_images.rst:168
# 46b1a4a390cc4e998b69b9fc8d2e7fbf
msgid "Takes a comma-separated list of one or more names. Each name is taken as an image tag. The image is shown behind all images with the given tags that are currently being shown."
msgstr ""

#: ../../source/displaying_images.rst:173
#: ../../source/displaying_images.rst:264
# 22fee302b7464944bc2b01f591075a64
# 2edd96e8a63a4348b3878a56d01add1c
msgid "``onlayer``"
msgstr ""

#: ../../source/displaying_images.rst:173
# 38c2696bcf244f27a69cf70c76440b1a
msgid "Takes a name. Shows the image on the named layer."
msgstr ""

#: ../../source/displaying_images.rst:179
# 6d802a78970e461fae569dd360e52c96
msgid "``zorder``"
msgstr ""

#: ../../source/displaying_images.rst:176
# 9b10c8b35a8d4b04a0828de9dfb3d9ec
msgid "Takes an integer. The integer specifies the relative ordering of images within a layer, with larger numbers being closer to the user. This isn't generally used in Ren'Py code, but can be useful when porting code from other engines."
msgstr ""

#: ../../source/displaying_images.rst:181
# 2d6c47c9784d4203a8b635651636f5d6
msgid "Assuming we have the following images defined::"
msgstr ""

#: ../../source/displaying_images.rst:187
# b12e375c89504a219fa2c23a5d2e90cd
msgid "Some example show statements are::"
msgstr ""

#: ../../source/displaying_images.rst:209
# 57c6ecf5ebe84508bfb086c5adc18da7
msgid "**Show Expression.** A variant of the show statement replaces the image name with the keyword ``expression``, followed by a simple expression. The expression must evaluate to a displayable, and the displayable is shown on the layer. To hide the displayable, a tag must be given with the as statement."
msgstr ""

#: ../../source/displaying_images.rst:216
#: ../../source/displaying_images.rst:266
# 6fdd41f4357547b6aec1ac5da1966e14
# ef123a66a3634a0cb2d8a8491f02b4dd
msgid "For example::"
msgstr ""

#: ../../source/displaying_images.rst:223
# 08078b2e26bc4ee49c13b0faf44e08bb
msgid "Scene Statement"
msgstr ""

#: ../../source/displaying_images.rst:225
# 10a217afcea04f0699b40d6aacef7f6a
msgid "The scene statement removes all displayables from a layer, and then shows an image on that layer. It consists of the keyword ``scene``, followed by an image name, followed by zero or more properties. The image is shown in the same way as in the show statement, and the scene statement takes the same properties as the show statement."
msgstr ""

#: ../../source/displaying_images.rst:231
# 51a5597e68494bf7b0d46fd904b9bc10
msgid "The scene statement is often used to show an image on the background layer. For example::"
msgstr ""

#: ../../source/displaying_images.rst:236
# 27adf4b4adc240919d86f5cfa97d689c
msgid "**Scene Expression.** Like the show statement, the scene statement can take expressions instead of image names."
msgstr ""

#: ../../source/displaying_images.rst:240
# b014694cfe6947908ec44ff698cd4235
msgid "**Clearing a layer.** When the image name is omitted entirely, the scene statement clears all displayables from a layer without showing another displayable."
msgstr ""

#: ../../source/displaying_images.rst:248
# a49085e1309346c4918bbe945971f8a0
msgid "Hide Statement"
msgstr ""

#: ../../source/displaying_images.rst:250
# 6dbd3c3068fd4eccaa71960fc09e67c9
msgid "The hide statement removes an image from a layer. It consists of the keyword ``hide``, followed by an image name, followed by an optional property. The hide statement takes the image tag from the image name, and then hides any image on the layer with that tag."
msgstr ""

#: ../../source/displaying_images.rst:255
# 89906b09be6943cf870538cbebe9bf55
msgid "Hide statements are rarely necessary. If a sprite represents a character, then a hide statement is only necessary when the character leaves the scene. When the character changes her emotion, it is preferable to use the show statement instead, as the show statement will automatically replace an image with the same tag."
msgstr ""

#: ../../source/displaying_images.rst:261
# 9aefd71a624449feb8eb00304b99a35b
msgid "The hide statement takes the following property:"
msgstr ""

#: ../../source/displaying_images.rst:264
# e052b0d18b9a4b68985885b8d6f7f9cd
msgid "Takes a name. Hides the image from the named layer."
msgstr ""

#: ../../source/displaying_images.rst:272
# b036df9aa3b14f3f92b84bd30d420689
msgid "You should never write::"
msgstr ""

#: ../../source/displaying_images.rst:277
# 254961c1391249a4856b073729aae1bb
msgid "Instead, just write::"
msgstr ""

#: ../../source/displaying_images.rst:285
# ef01d50e7bf5430d955128e44820a639
msgid "With Statement"
msgstr ""

#: ../../source/displaying_images.rst:287
# 1addd89fc258408ba8911d79eae19a8e
msgid "The with statement is used to apply a transition effect when the scene is changed, making showing and hiding images less abrupt. The with statement consists of the keyword ``with``, followed by a simple expression that evaluates either to a transition object or the special value ``None``."
msgstr ""

#: ../../source/displaying_images.rst:293
# 5a66e926e4e44b23a491d2896ca00dfc
msgid "The transition effect is applied between the contents of the screen at the end of the previous interaction (with transient screens and displayables hiddden), and the current contents of the scene, after the show and hide statements have executed."
msgstr ""

#: ../../source/displaying_images.rst:298
# 51983d39069f4894b920a541cc837a97
msgid "The with statement causes an interaction to occur. The duration of this interaction is controlled by the user, and the user can cause it to terminate early."
msgstr ""

#: ../../source/displaying_images.rst:302
# 89b00e5a7ca4426ebaed457bc1de6285
msgid "For a full list of transitions that can be used, see the chapter on :ref:`transitions <transitions>`."
msgstr ""

#: ../../source/displaying_images.rst:305
# e87766d4f724496788a16c3c0269aafd
msgid "An example of the with statement is::"
msgstr ""

#: ../../source/displaying_images.rst:314
# 0734c94c957e4148bc051994de55e46a
msgid "This causes two transitions to occur. The first with statement uses the ``dissolve`` transition to change the screen from what was previously shown to the washington background. (The ``dissolve`` transition is, by default, defined as a .5 second dissolve.)"
msgstr ""

#: ../../source/displaying_images.rst:319
# 9fa3227929f040238a0b5e2f212eb6f2
msgid "The second transition occurs after the Eileen and Lucy images are shown. It causes a dissolve from the scene consisting solely of the background to the scene consisting of all three images - the result is that the two new images appear to dissolve in simultaneously."
msgstr ""

#: ../../source/displaying_images.rst:327
# 11421c49a95a4b929a2a72e22874e3e7
msgid "With None"
msgstr ""

#: ../../source/displaying_images.rst:329
# f382a9d80a0d48c4b133ff6a0dd37010
msgid "In the above example, there are two dissolves. But what if we wanted the background to appear instantly, followed by a dissolve of the two characters? Simply omitting the first with statement would cause all three images to dissolve in - we need a way to say that the first should be show instantly."
msgstr ""

#: ../../source/displaying_images.rst:335
# 5d4e28a49a7a461e86524a34656d2dd4
msgid "The with statement changes behavior when given the special value ``None``. The ``with None`` statement causes an abbreviated interaction to occur, without changing what the user sees. When the next transition occurs, it will start from the scene as it appears at the end of this abbreviated interaction."
msgstr ""

#: ../../source/displaying_images.rst:341
# c617a87bdb87493eb83288cad575e356
msgid "For example, in the code::"
msgstr ""

#: ../../source/displaying_images.rst:350
# 97d3fc1027464939ba18245206fe2928
msgid "Only a single transition occurs, from the washington background to the scene consisting of all three images."
msgstr ""

#: ../../source/displaying_images.rst:354
# 070f4ad2d97a44e2adbc600f96dcaa6c
msgid "With Clause of Scene, Show, and Hide Statements"
msgstr ""

#: ../../source/displaying_images.rst:356
# f3a55b6b07134716b65140fe91c2fc96
msgid "The show, scene, and hide statements can take an optional with clause, which allows a transition to be combined with showing or hiding an image. This clause follows the statements at the end of the same logical line. It begins with the keyword ``with``, followed by a simple expression."
msgstr ""

#: ../../source/displaying_images.rst:362
# 670c075d6d3641e89565759e21c61332
msgid "The with clause is equivalent to preceding the line with a ``with None`` statement, and following it by a :ref:`with statement <with-statement>` containing the text of the with clause. For example::"
msgstr ""

#: ../../source/displaying_images.rst:369
# cb4547b3b6c84815859ce6a66bdef868
msgid "is equivalent to::"
msgstr ""

