# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Tom Rothamel
# This file is distributed under the same license as the Ren'Py Visual Novel Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ren'Py Visual Novel Engine 6.15.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-21 10:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/language_basics.rst:6
# 034b94eec1ef4acdb889fd142c3877ea
msgid "Language Basics"
msgstr ""

#: ../../source/language_basics.rst:8
# a30f1d27e6b044c1b02ca3a07cdea1fd
msgid "Before we can describe the Ren'Py language, we must first describe the structure of a Ren'Py script. This includes how a files are broken into blocks made up of lines, and how those lines are broken into the elements that make up statements."
msgstr ""

#: ../../source/language_basics.rst:14
# 63f11d87f8ba448ea851e6459f437180
msgid "Files"
msgstr ""

#: ../../source/language_basics.rst:16
# ea3bafd96c0d4e269e65bd207de7eeb0
msgid "The script of a Ren'Py game is made up of all the files found under the game directory ending with the .rpy extension. Ren'Py will consider each of these files (in unicode order), and will use the contents of the files as the script."
msgstr ""

#: ../../source/language_basics.rst:21
# e7b65a29d2da4d26acae70d1c06d9f35
msgid "Generally, there's no difference between a script broken into multiple files, and a script that consists of one big file. Control can be transferred between files by jumping to or calling a label in another file.  This makes the division of a script up into files a matter of personal style - some game-makers prefer to have small files (like one per event, or one per day), while others prefer to have one big script."
msgstr ""

#: ../../source/language_basics.rst:29
# 8a42f3696cb543df8a159ad489d7c5e6
msgid "To speed up loading time, Ren'Py will compile the ``.rpy`` files into .rpyc files when it starts up. When a ``.rpy`` file is changed, the ``.rpyc`` file will be updated when Ren'Py starts up. However, if a .rpyc file exists without a corresponding ``.rpy`` file, the ``.rpyc`` file will be used. This can lead to problems if a ``.rpy`` file is deleted without deleting the .rpyc file."
msgstr ""

#: ../../source/language_basics.rst:38
# 9a29405ce97744b3aaf9e91d4a97b9fc
msgid "Comments"
msgstr ""

#: ../../source/language_basics.rst:40
# 3cd4c7430d45430fb6e437ec10632d76
msgid "A Ren'Py script file may contain comments. A comment begins with a hash mark ('#'), and ends at the end of the line containing the comment. As an exception, a comment may not be part of a string."
msgstr ""

#: ../../source/language_basics.rst:51
# 8f946bed0938457dba681d01bdaf0f11
msgid "Ren'Py ignores comments, so the script is treated like the comment wasn't there."
msgstr ""

#: ../../source/language_basics.rst:56
# 80d8924a33d04cb891533285cb654e7e
msgid "Logical Lines"
msgstr ""

#: ../../source/language_basics.rst:58
# c2edd9b576994b00b0572bc6fb09c650
msgid "A script file is broken up into :dfn:`logical lines`. A logical line always begins at the start of a line in the file. A logical line ends at the end of a line, unless:"
msgstr ""

#: ../../source/language_basics.rst:62
# d6d0f8ec54cd40b999fd27b166feaee9
msgid "The last character on the line is a backslash ('\\\\')."
msgstr ""

#: ../../source/language_basics.rst:64
# 30d146e75af3492cbea0be1ec1c704d2
msgid "The line contains an open parenthesis character ('(', '{', or '['), that hasn't been matched by the cooresponding close parenthesis character (')', '}', or ']', respectively)."
msgstr ""

#: ../../source/language_basics.rst:68
# 7e8baed715634599885e6d9a3748def7
msgid "The end of the line occurs during a string."
msgstr ""

#: ../../source/language_basics.rst:70
# 28148267dd044286a2b8bcc24303474a
msgid "Once a logical line ends, the next logical line begins at the start of the next line."
msgstr ""

#: ../../source/language_basics.rst:73
# 6cdfe0b4d8dc4ef1bf5dfc186e16167e
msgid "Most statements in the Ren'Py language consist of a single logical line, while some statements consist of multiple lines."
msgstr ""

#: ../../source/language_basics.rst:86
# cba853f13ec648808cc0fecd45bc3b4b
msgid "Empty logical lines are ignored."
msgstr ""

#: ../../source/language_basics.rst:90
# 15c8c710c81e4fd79a31ec07f01c1d99
msgid "Indentation and Blocks"
msgstr ""

#: ../../source/language_basics.rst:92
# 488a839bc439491582fb51ec990f6324
msgid ":dfn:`Indentation` is the name we give to the space at the start of each logical line that's used to line up Ren'Py statements. In Ren'Py, indentation must consist only of spaces."
msgstr ""

#: ../../source/language_basics.rst:96
# 971ab04f21304c678be1e55095a983b7
msgid "Indentation is used to group statements into :dfn:`blocks`. A block is a group of lines, and often a group of statements. The rules for dividing a file into blocks are:"
msgstr ""

#: ../../source/language_basics.rst:100
# 2e42b58d0bc24d41b14c0ba7c68c7000
msgid "A block is open at the start of a file."
msgstr ""

#: ../../source/language_basics.rst:102
# 07aaec1ab5b043ee9f5a0381a3918d1f
msgid "A new block is started whenever a logical line is indented past the previous logical line."
msgstr ""

#: ../../source/language_basics.rst:105
# 3ef61c70cf024bcdb8f3d6e636322fda
msgid "All logical lines inside a block must have the same indentation."
msgstr ""

#: ../../source/language_basics.rst:107
# 03a66c6cc49645cd870b7cb4cbb765f4
msgid "A block ends when a logical line is encountered with less indentation than the lines in the block."
msgstr ""

#: ../../source/language_basics.rst:110
# 371d27d95c9140a5bc7593a02f524001
msgid "Indentation is very important to Ren'Py, and cause syntax or logical errors when it's incorrect. At the same time, the use of indentation to convey block structure provides us a way of indicating that structure without overwhelming the script text."
msgstr ""

#: ../../source/language_basics.rst:129
# a1f6c48d335843f2aa2a271222911b0f
msgid "Elements of Statements"
msgstr ""

#: ../../source/language_basics.rst:131
# 041b230e40c948629880bb43e2c4904f
msgid "Ren'Py statements are made of a few basic parts."
msgstr ""

#: ../../source/language_basics.rst:140
# 82f2acf4f63c45d483d705be5434385d
msgid ":dfn:`Keyword`"
msgstr ""

#: ../../source/language_basics.rst:134
# dfb0bfb3ef4c4b19a14af43f6f8ab62d
msgid "A keyword is a word that must literally appear in the source code. They're used to introduce statements and properties."
msgstr ""

#: ../../source/language_basics.rst:137
# 634f86f4ef60449086e8e757c96ab1c4
msgid "Names begining with a single underscore (_) are reserved for Ren'Py internal use, unless otherwise documented. When a name begins with __ but doesn't end with __, it is changed to a file-specfic version of that name."
msgstr ""

#: ../../source/language_basics.rst:146
# edb6ad3a4d37424e92363a955adccff6
msgid ":dfn:`Name`"
msgstr ""

#: ../../source/language_basics.rst:143
# a114ca837e344a509b2f08f71280cb25
msgid "A name begins with a letter or underscore, which is followed by zero or more letters, numbers, and underscores. For our purpose, unicode characters between U+00a0 and U+fffd are considered to be letters."
msgstr ""

#: ../../source/language_basics.rst:160
# 6c73f2bee64d4296a49a4dabb30a8743
msgid ":dfn:`Image Name`"
msgstr ""

#: ../../source/language_basics.rst:149
# 3aa15f4fffed487a9634ca81df211f4f
msgid "An image name consists of one or more names, separated by spaces. The name ends at the end of the statement, or when a keyword is encountered."
msgstr ""

#: ../../source/language_basics.rst:153
# fc0e2faf2a4b4aa3973e698b9953c174
msgid "An :dfn:`image name` consists of one or more names, separated by spaces. The first component of the image name is called the :dfn:`image tag`. The second and later components of the name are the :dfn:`image attributes`."
msgstr ""

#: ../../source/language_basics.rst:158
# b0a8a345ba0b476880e89facc2285dc4
msgid "For example, take the image name ``mary beach night happy``. The image tag is ``mary``, while the image attributes are ``mary``, ``beach``, and ``night``."
msgstr ""

#: ../../source/language_basics.rst:175
#: ../../source/language_basics.rst:252
# 15ccc118ae72461ea9ff3a901b610b0b
# 7079a390d6f349b7a75dd69c300f5a2f
msgid ":dfn:`String`"
msgstr ""

#: ../../source/language_basics.rst:163
# 68da40275ec84c5ea9c30b9d6d230dfa
msgid "A string begins with a quote character (one of \", ', or \\`), contains some sequence of characters, and ends with the same quote character."
msgstr ""

#: ../../source/language_basics.rst:167
# 74e8357d56f7499898b25fad69fada57
msgid "The backslash character (\\) is used to escape quotes, special characters such as % (written as \\%) and { (written as \\{). It's also used to include newlines, using the \\n sequence."
msgstr ""

#: ../../source/language_basics.rst:171
# 5698c30a9a0e44668ee0fb8d0249f5ae
msgid "Inside a Ren'Py string, consecutive whitespace is compressed into a single whitespace character, unless a space is preceded by a backslash. ::"
msgstr ""

#: ../../source/language_basics.rst:194
# dbcb77eeb6a744e29da7040dee173051
msgid ":dfn:`Simple Expression`"
msgstr ""

#: ../../source/language_basics.rst:178
# 354c1ad14a1f4d589af9bcf4c072e1c1
msgid "A simple expression is a Python expression, used to include Python in some parts of the Ren'Py script. A simple expression begins with:"
msgstr ""

#: ../../source/language_basics.rst:182
# e884189cc4a44a35a64c2f99b92ec4c3
msgid "A name."
msgstr ""

#: ../../source/language_basics.rst:183
# 222fb59a549247e4b345fbda20faae0f
msgid "A string."
msgstr ""

#: ../../source/language_basics.rst:184
# ed6b0dc4bf304c6db3b33e27bd716b09
msgid "A number."
msgstr ""

#: ../../source/language_basics.rst:185
# b88e130a5ded4c9b97ffd2509fb8d25b
msgid "Any python expression, in parenthesis."
msgstr ""

#: ../../source/language_basics.rst:187
# 6c58dbb1237748b1ae854004f4e90dfa
msgid "This can be followed by any number of:"
msgstr ""

#: ../../source/language_basics.rst:189
# 4488e58c76a9468cacc0cecc306d91a2
msgid "A dot followed by a name."
msgstr ""

#: ../../source/language_basics.rst:190
# e855e93e7ea64e97ab835652de62461a
msgid "A parenthesised python expression."
msgstr ""

#: ../../source/language_basics.rst:192
# 9cfe2e5d4d63498d8cdf96f8b7a2923c
msgid "As an example, ``3``, ``(3 + 4)``, ``foo.bar``, and ``foo(42)`` are all simple expressions. But ``3 + 4`` is not, as the expression ends at the end of a string."
msgstr ""

#: ../../source/language_basics.rst:197
# 6e3167a913b54c63ac258718e76d4c1a
msgid ":dfn:`At List`"
msgstr ""

#: ../../source/language_basics.rst:197
# ca24faf8dff14feab5f272f4b4757d60
msgid "An at list is a list of simple expressions, separated by commas."
msgstr ""

#: ../../source/language_basics.rst:203
# bde6955ae29748aaae8d07316e1a6032
msgid ":dfn:`Python Expression`"
msgstr ""

#: ../../source/language_basics.rst:200
# 36e4db9ee48e4838abd203f372c4c32a
msgid "A python expression is an arbitrary python expression, that may not include a colon. These are used to express the conditions in the if and while statements."
msgstr ""

#: ../../source/language_basics.rst:206
# 4094b8b72a1942c783c645843d96f582
msgid "Common Statement Syntax"
msgstr ""

#: ../../source/language_basics.rst:208
# 404b9f10541a4b2481257a0054677360
msgid "Most Ren'Py statements share a common syntax. With the exception of the say statement, they begin with a keyword that introduces the statement. This keyword is followed by a parameter, if the statement takes one."
msgstr ""

#: ../../source/language_basics.rst:213
# 759adcdc1f1547178184c91ad05f0ad9
msgid "The parameter is then followed by one or more properties. Properties may be supplied in any order, provided each property is only supplied once. A property starts off with a keyword. For most properties, the property name is followed by one of the syntax elements given above."
msgstr ""

#: ../../source/language_basics.rst:218
# 00cd55ff9fca4893a5057b73df0921c5
msgid "If the statement takes a block, the line ends with a colon (:). Otherwise, the line just ends."
msgstr ""

#: ../../source/language_basics.rst:223
# 76416a39a4b848b3b159a4babfd6382d
msgid "Python Expression Syntax"
msgstr ""

#: ../../source/language_basics.rst:227
# f3feabef7f68400d91049576e4c3500c
msgid "It may not be necessary to read this section thoroughly right now. Instead, skip ahead, and if you find yourself unable to figure out an example, or want to figure out how things actually work, you can go back and review this."
msgstr ""

#: ../../source/language_basics.rst:233
# 3b5a0805b85143bd8a212b97715db9b7
msgid "Many portions of Ren'Py take python expressions. For example, defining a new Character involves a call to the Character function. While Python expressions are very powerful, only a fraction of that power is necessary to write a basic Ren'Py game."
msgstr ""

#: ../../source/language_basics.rst:238
# 3ebd4820382f415099ad9480d0ca4b9c
msgid "Here's a synopsis of python expressions."
msgstr ""

#: ../../source/language_basics.rst:242
# 9d9da1f245cf4b80a813bdcf9d4a0812
msgid ":dfn:`Integer`"
msgstr ""

#: ../../source/language_basics.rst:241
# a336f4ac8c4045599a528f76fdba7255
msgid "An integer is a number without a decimal point. ``3`` and ``42`` are integers."
msgstr ""

#: ../../source/language_basics.rst:246
# 8a4440f22c034ce4b84abdc2f72df5a6
msgid ":dfn:`Float`"
msgstr ""

#: ../../source/language_basics.rst:245
# 61f62f6bc43e493c8725f11366051f6a
msgid "A float (short for floating-point number) is a number with a decimal point. ``.5``, ``7.``, and ``9.0`` are all floats."
msgstr ""

#: ../../source/language_basics.rst:249
# e6793fedad7a4beab2e06a1cea75e161
msgid "Python strings begin with \" or ', and end with the same character. \\\\ is used to escape the end character, and to introduce special characters like newlines (\\\\n). Unlike Ren'Py strings, python strings can't span lines."
msgstr ""

#: ../../source/language_basics.rst:257
# 998704676af344ebb0ba601df19ebbf2
msgid ":dfn:`True, False, None`"
msgstr ""

#: ../../source/language_basics.rst:255
# 1604659d32364923a00d75b0c9b993dd
msgid "There are three special values. ``True`` is a true value, ``False`` is a false value. ``None`` represents the absence of a value. For example,"
msgstr ""

#: ../../source/language_basics.rst:273
# e769b52365214c4eaff339c5d4e38336
msgid ":dfn:`Tuple`"
msgstr ""

#: ../../source/language_basics.rst:260
# 59dc40b5b8f74ac38d1f63844b69257d
msgid "Tuples are used to represent containers where the number of items is important. For example, one might use a 2-tuple (also called a pair) to represent width and height, or a 4-tuple (x, y, width, height) to represent a rectangle."
msgstr ""

#: ../../source/language_basics.rst:265
# bae67391cc2b4759b631450a6e40d9ae
msgid "Tuples begin with a left-parenthesis ``(``, consist of zero or more comma-separated python expressions, and end with a right-parenthesis ``)``. As a special case, the one-item tuple must have a parenthesis following the item. For example::"
msgstr ""

#: ../../source/language_basics.rst:283
# 3986db0cee8c406f88a259bbed4f9f96
msgid ":dfn:`List`"
msgstr ""

#: ../../source/language_basics.rst:276
# 695c62727e2b4aaa8dae726c66363c6c
msgid "Lists are used to represent containers where the number of items may vary. A list begins with a ``[``, contains a comma-separated list of expressions, and ends with ``]``. For example::"
msgstr ""

#: ../../source/language_basics.rst:296
# d14b7159d25e4ac68ae1c06fa89528e4
msgid ":dfn:`Variable`"
msgstr ""

#: ../../source/language_basics.rst:286
# 8f23e672af3c48e086a732a207d16f78
msgid "Python expressions can use variables, that store values defined using the define statement or python statements. A variable begins with a letter or underscore, and then has zero or more letters, numbers, or underscores. For example::"
msgstr ""

#: ../../source/language_basics.rst:295
# 377680763230492693fa26f89c860bf0
msgid "Variables beginning with _ are reserved for Ren'Py's use, and shouldn't be used by user code."
msgstr ""

#: ../../source/language_basics.rst:306
# 153d4f8a109443088b9b825ae8649ed3
msgid ":dfn:`Field Access`"
msgstr ""

#: ../../source/language_basics.rst:299
# 55852c67a9594b83b9c584fcc9e151c9
msgid "Python modules and objects have fields, which can be accessed with by following an expression (usually a variable) with a dot and the field name. For example::"
msgstr ""

#: ../../source/language_basics.rst:305
# 1e441b555ba04530aba5f6e094878e54
msgid "Consists of a variable (config) followed by a field access (screen_width)."
msgstr ""

#: ../../source/language_basics.rst:325
# e6712d2c0d76485a8b16d150ea433a14
msgid ":dfn:`Call`"
msgstr ""

#: ../../source/language_basics.rst:309
# 253a88e90d2d4c9c86451fb1024b3fe0
msgid "Python expressions can call a function which returns a value. They begin with an expression (usually a variable), followed by a left-parenthesis, a comma-separated list of arguments, and a right-parenthesis. The argument list begins with the position arguments, which are python expressions. These are followed by keyword arguments, which consist of the argument name, and equals sign, and an expression. In the example example::"
msgstr ""

#: ../../source/language_basics.rst:319
# a93e2794fb65443788fab69b98923d01
msgid "we call the Character function. It's given one positional argument, the string \"Eileen\". It's given two keyword argument: ``type`` with the value of the ``adv`` variable, and ``color`` with a string value of \"#0f0\"."
msgstr ""

#: ../../source/language_basics.rst:324
# 10c02db546a94920b22554ec4ea2827c
msgid "Constructors are a type of function which returns a new object, and are called the same way."
msgstr ""

#: ../../source/language_basics.rst:327
# 33ad1ac3670d430f9bcd0f7429ee6fad
msgid "When reading this documentation, you might see a function signature like:"
msgstr ""

#: ../../source/language_basics.rst:332
# 38ee996b57bd4d90b7c52eb7a733c6c2
msgid "A sample function that doesn't actually exist in Ren'Py, but is used only in documentation."
msgstr ""

#: ../../source/language_basics.rst:335
# 9b687e17f6fc4ad7b2b83f1ff32c5977
msgid "This function:"
msgstr ""

#: ../../source/language_basics.rst:337
# 94c16090621142409b7a4d997361ba54
msgid "Has the name \"Sample\""
msgstr ""

#: ../../source/language_basics.rst:338
# 3c0d0756b8114bb197f453b402cc292b
msgid "Has two positional parameters, a name and a delay. In a real function, the types of these parameters would be made clear from the documentation."
msgstr ""

#: ../../source/language_basics.rst:341
# 5b7b840d53314422ad2becba018ca812
msgid "Has one keyword argument, position, which has a default value of (0, 0)."
msgstr ""

#: ../../source/language_basics.rst:344
# 4926ee16f55947b0b656ccee60a1137c
msgid "Since the functions ends with \\*\\*properties, it means that it can take :ref:`style properties <style-properties>` as additional keyword arguments. Other special entries are \\*args, which means that it takes an arbitrary number of postional parameters, and \\*\\*kwargs, which means that the keyword arguments are described in the documentation."
msgstr ""

#: ../../source/language_basics.rst:350
# 7585547eab884086bd61c2b65cf5bd28
msgid "Python is a lot more powerful than we have space for in this manual. To learn Python in more detail, we recommend starting with the Python tutorial, which is available from `python.org <http://docs.python.org/release/2.6.6/tutorial/index.html>`_. While we don't think a deep knowledge of Python is necessary to work with Ren'Py, learning about python expressions is helpful."
msgstr ""

