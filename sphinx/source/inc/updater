.. Automatically generated file - do not modify.

.. function:: updater.Update(*args, **kwargs)
    
    An action that calls :func:`updater.update`. All arguments are
    stored and passed to that function.

.. function:: updater.can_update(base=None)
    
    Returns true if it's possible that an update can succeed. Returns false
    if updating is totally impossible. (For example, if the update directory
    was deleted.)

.. function:: updater.get_installed_packages(base=None)
    
    Returns a list of installed DLC package names.
    
    `base`
        The base directory to update. Defaults to the current project's
        base directory.

.. function:: updater.update(url, base=None, force=False, public_key=None, simulate=None, add=[], restart=True)
    
    Updates this Ren'Py game to the latest version.
    
    `url`
        The URL to the updates.json file.
        
    `base`
        The base directory that will be updated. Defaults to the base
        of the current game. (This can usually be ignored.)
    
    `force`
        Force the update to occur even if the version numbers are 
        the same. (Used for testing.)
        
    `public_key`
        The path to a PEM file containing a public key that the 
        update signature is checked against. (This can usually be ignored.)
        
    `simulate`
        This is used to test update guis without actually performing
        an update. This can be:
        
        * None to perform an update.
        * "available" to test the case where an update is available.
        * "not_available" to test the case where no update is available.
        * "error" to test an update error.
    
    `add`
        A list of packages to add during this update. This is only necessary
        for dlc.
    
    `restart`
        Restart the game after the update.

