.. Automatically generated file - do not modify.

.. function:: renpy.clear_game_runtime()
    
    Resets the game runtime counter.

.. function:: renpy.exists(filename)
    
    Returns true if the given filename can be found in the
    searchpath. This only works if a physical file exists on disk. It
    won't find the file if it's inside of an archive.

.. function:: renpy.file(fn)
    
    Returns a read-only file-like object that accesses filename. The file is
    accessed using Ren'Py's standard search method, and may reside in an archive.
    The object supports a wide subset of the fields and methods found on python's
    standard file object. (Basically, all of the methods that are sensible for a
    read-only object.)

.. function:: renpy.focus_coordinates()
    
    This attempts to find the coordinates of the currently-focused
    displayable. If it can, it will return them as a (x, y, w, h)
    tuple. If not, it will return a (None, None, None, None) tuple.

.. function:: renpy.free_memory()
    
    Attempts to free some memory. Useful before running a renpygame-based
    minigame.

.. function:: renpy.fsdecode(s)
    
    Converts s from filesystem encoding to unicode.

.. function:: renpy.fsencode(s)
    
    Converts s from unicode to the filesystem encoding.

.. function:: renpy.get_game_runtime()
    
    Returns the game runtime counter.
    
    The game runtime counter counts the number of seconds that have
    elapsed while waiting for user input in the top-level context.
    (It does not count time spent in the main or game menus.)

.. function:: renpy.get_image_load_log(age=None)
    
    A generator that yields a log of image loading activity. For the last 100
    image loads, this returns:
    
    * The time the image was loaded (in seconds since the epoch).
    * The filename of the image that was loaded.
    * A boolean that is true if the image was preloaded, and false if the
      game stalled to load it.
    
    The entries are ordered from newest to oldest.
    
    `age`
        If not None, only images that have been loaded in the past `age`
        seconds are included.
    
    The image load log is only kept if config.developer = True.

.. function:: renpy.get_physical_size()
    
    Returns the size of the physical window.

.. function:: renpy.get_renderer_info()
    
    Returns a dictionary, giving information about the renderer Ren'Py is
    currently using. The dictionary has one required key:
    
    ``"renderer"``
        One of ``"gl"`` or ``"sw"``, corresponding to the OpenGL and
        software renderers, respectively.
    
    ``"resizable"``
        True if and only if the window is resizable.
    
    ``"additive"``
        True if and only if the renderer supports additive blending.
    
    Other, renderer-specific, keys may also exist. The dictionary should
    be treated as immutable. This should only be called once the display
    has been started (that is, after the init code is finished).

.. function:: renpy.get_say_attributes()
    
    Gets the attributes associated with the current say statement, or
    None if no attributes are associated with this statement.
    
    This is only valid when executing or predicting a say statement.

.. function:: renpy.get_side_image(prefix_tag, image_tag=None, not_showing=True, layer='master')
    
    This attempts to find an image to show as the side image.
    
    It begins by determining a set of image attributes. If `image_tag` is
    given, it gets the image attributes from the tag. Otherwise, it gets
    them from the currently showing character.
    
    It then looks up an image with the tag `prefix_tag` and those attributes,
    and returns it if it exists.
    
    If not_showing is True, this only returns a side image if the image the
    attributes are taken from is not on the screen.

.. function:: renpy.image_size(im)
    
    Given an image manipulator, loads it and returns a (``width``,
    ``height``) tuple giving its size.
    
    This reads the image in from disk and decompresses it, without
    using the image cache. This can be slow.

.. function:: renpy.is_seen(ever=True)
    
    Returns true if the current line has been seen by the player.
    
    If `ever` is true, we check to see if the line has ever been seen by the
    player. If false, we check if the line has been seen in the current
    play-through.

.. function:: renpy.list_files(common=False)
    
    Lists the files in the game directory and archive files. Returns
    a list of files, with / as the directory separator.
    
    `common`
        If true, files in the common directory are included in the
        listing.

.. function:: renpy.load_module(name, **kwargs)
    
    This loads the Ren'Py module named name. A Ren'Py module consists of Ren'Py code
    that is loaded into the usual (store) namespace, contained in a file named
    name.rpym or name.rpymc. If a .rpym file exists, and is newer than the
    corresponding .rpymc file, it is loaded and a new .rpymc file is created.
    
    All init code in the module is run before this function returns. An error is
    raised if the module name cannot be found, or is ambiguous.
    
    Module loading may only occur from inside an init block.

.. function:: renpy.loadable(filename)
    
    Returns True if the given filename is loadable, meaning that it
    can be loaded from the disk or from inside an archive. Returns
    False if this is not the case.

.. function:: renpy.notify(message)
    
    Causes Ren'Py to display the `message` using the notify screen. By
    default, this will cause the message to be dissolved in, displayed
    for two seconds, and dissolved out again.
    
    This is useful for actions that otherwise wouldn't produce feedback,
    like screenshots or quicksaves.
    
    Only one notification is displayed at a time. If a second notification
    is displayed, the first notification is replaced.

.. function:: renpy.quit(relaunch=False)
    
    This causes Ren'Py to exit entirely.
    
    `relaunch`
        If true, Ren'Py will run a second copy of itself before quitting.

.. function:: renpy.set_physical_size(size)
    
    Attempts to set the size of the physical window to `size`. This has the
    side effect of taking the screen out of fullscreen mode.

.. function:: renpy.vibrate(duration)
    
    Causes the device to vibrate for `duration` seconds. Currently, this
    is only supported on Android.

.. function:: layout.yesno_screen(message, yes=None, no=None)
    
    This causes the a yes/no prompt screen with the given message
    to be displayed. The screen will be hidden when the user hits
    yes or no.
    
    `message`
        The message that will be displayed.
    
    `yes`
        An action that is run when the user chooses yes.
    
    `no`
        An action that is run when the user chooses no.

